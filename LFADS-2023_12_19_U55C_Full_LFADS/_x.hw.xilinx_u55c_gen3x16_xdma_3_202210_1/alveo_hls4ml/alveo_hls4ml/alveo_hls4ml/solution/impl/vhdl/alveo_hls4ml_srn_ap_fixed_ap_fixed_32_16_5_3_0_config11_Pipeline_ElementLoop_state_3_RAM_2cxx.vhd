-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_3_RAM_2cxx is 
    generic(
        MEM_TYPE        : string    := "block"; 
        DataWidth       : integer   := 32; 
        AddressWidth    : integer   := 6;
        AddressRange    : integer   := 64
    ); 
    port (
        address0    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce0         : in std_logic; 
        q0          : out std_logic_vector(DataWidth-1 downto 0);
        address1    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce1         : in std_logic; 
        d1          : in std_logic_vector(DataWidth-1 downto 0); 
        we1         : in std_logic; 
        reset           : in std_logic; 
        clk             : in std_logic 
    ); 
end entity; 

architecture rtl of alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_3_RAM_2cxx is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);


type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
-- Init 
signal ram : mem_array := (
    0 => "00000010000110011101100010010110", 1 => "10110000111111001101111000110101", 2 => "11011101100100101011011110101010", 3 => "00111100100011001010001111100001", 
    4 => "11110001101101001110011101100000", 5 => "11001011010101001111000000011100", 6 => "00110111011010010011000101101001", 7 => "11111010110100101100011111000010", 
    8 => "01010010011111001100010101001001", 9 => "10000111111110010110101111101001", 10 => "01110010100110111110100110101101", 11 => "01011000000000101100011011010111", 
    12 => "00000100110010010011101000011110", 13 => "00011100100011000010001101000001", 14 => "00101100111011010011010111001110", 15 => "10000011111010101001010110110000", 
    16 => "01100110111101111000110010011010", 17 => "11111101110011010000011000110101", 18 => "01111001111101001010110010110100", 19 => "00000110010101011000011011011100", 
    20 => "11001000010010010110011000110000", 21 => "10101010100001010101000000000000", 22 => "10110110000110100100011011110011", 23 => "10110111000000111001101100001001", 
    24 => "01111011000001010000011101001000", 25 => "01011000110000110101010110101000", 26 => "01001011111101000001100010110000", 27 => "11001010100010001011100101000100", 
    28 => "00011011000000101011111101100001", 29 => "01100110001001100000011100110111", 30 => "10000001001100010010101100000010", 31 => "11100000101011011110011110010111", 
    32 => "01100100110101110101101110001111", 33 => "10000010010100111110110100110110", 34 => "10111011110010001111111111011000", 35 => "11111110111011011111011110000110", 
    36 => "00010001100101000010000101110000", 37 => "01011101001110010100000101010000", 38 => "10101011100010111011111010000000", 39 => "10111111101100100000101110011000", 
    40 => "10001110011110110101101000111001", 41 => "00010110111011000000111111111011", 42 => "10000000001010011101111010000001", 43 => "01100101110110001000010011101100", 
    44 => "00000011010000111010101110001100", 45 => "00110001100011111011111011110011", 46 => "00010101110001010010001111001010", 47 => "10111101011011001011100111110001", 
    48 => "01001110010100001100001111011000", 49 => "11100011110111101011110001100010", 50 => "11101011101000010001111010101110", 51 => "11111010110011101010000001010111", 
    52 => "01111010110010011001100000110111", 53 => "11111110100111010111111101011100", 54 => "00001001000100110001000111000010", 55 => "01010101111000111001000100001110", 
    56 => "00111010001111110011001100111001", 57 => "10010100100101111001000001011001", 58 => "01111100011011111101011100111001", 59 => "11101001110100011000101011010011", 
    60 => "01000001101101111100101101110111", 61 => "00000011000101010000111101110111", 62 => "10001000011110001010011111001000", 63 => "10000010110010001010100111110101"); -- 
attribute syn_ramstyle : string;
attribute syn_ramstyle of ram : signal is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : signal is MEM_TYPE;

begin 


memory_access_guard_0: process (address0) 
begin
    address0_tmp <= address0;
--synthesis translate_off
    if (CONV_INTEGER(address0) > AddressRange-1) then
        address0_tmp <= (others => '0');
    else 
       address0_tmp <= address0;
    end if;
--synthesis translate_on
end process;   -- 



p_memory_access_0: process (clk)
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= ram(CONV_INTEGER(address0_tmp));
        end if;
    end if;
end process;



 


p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            if (we1 = '1') then 
                ram(CONV_INTEGER(address1)) <= d1; 
            end if;
        end if;
    end if;
end process;      




 

end rtl;
