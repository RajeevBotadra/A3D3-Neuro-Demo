-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_linear_ap_fixed_16_6_5_3_0_ap_fixed_16_3_4_0_0_linear_config23_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer26_out_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    layer26_out_0_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_0_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_0_empty_n : IN STD_LOGIC;
    layer26_out_0_read : OUT STD_LOGIC;
    layer26_out_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    layer26_out_1_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_1_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_1_empty_n : IN STD_LOGIC;
    layer26_out_1_read : OUT STD_LOGIC;
    layer26_out_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    layer26_out_2_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_2_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_2_empty_n : IN STD_LOGIC;
    layer26_out_2_read : OUT STD_LOGIC;
    layer26_out_3_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    layer26_out_3_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_3_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer26_out_3_empty_n : IN STD_LOGIC;
    layer26_out_3_read : OUT STD_LOGIC;
    layer23_out_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer23_out_0_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_0_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_0_full_n : IN STD_LOGIC;
    layer23_out_0_write : OUT STD_LOGIC;
    layer23_out_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer23_out_1_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_1_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_1_full_n : IN STD_LOGIC;
    layer23_out_1_write : OUT STD_LOGIC;
    layer23_out_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer23_out_2_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_2_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_2_full_n : IN STD_LOGIC;
    layer23_out_2_write : OUT STD_LOGIC;
    layer23_out_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer23_out_3_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_3_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer23_out_3_full_n : IN STD_LOGIC;
    layer23_out_3_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of alveo_hls4ml_linear_ap_fixed_16_6_5_3_0_ap_fixed_16_3_4_0_0_linear_config23_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_49 : STD_LOGIC_VECTOR (6 downto 0) := "1001001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln16_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer26_out_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer26_out_1_blk_n : STD_LOGIC;
    signal layer26_out_2_blk_n : STD_LOGIC;
    signal layer26_out_3_blk_n : STD_LOGIC;
    signal layer23_out_0_blk_n : STD_LOGIC;
    signal layer23_out_1_blk_n : STD_LOGIC;
    signal layer23_out_2_blk_n : STD_LOGIC;
    signal layer23_out_3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_V_fu_245_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1529_fu_347_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1529_reg_575 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1531_fu_449_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1531_reg_580 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1533_fu_551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1533_reg_585 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_fu_140_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp10_fu_173_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_2420_fu_165_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln895_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln896_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln346_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_444_fu_231_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1534_fu_159_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_275_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_2422_fu_267_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_64_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2421_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln895_317_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_381_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_64_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_573_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln896_317_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_317_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_317_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln346_317_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_333_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1535_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_377_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_2424_fu_369_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_65_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2423_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln895_318_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_382_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_65_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_574_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln896_318_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_318_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_318_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln346_318_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_445_fu_435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1536_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_190_fu_479_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_2426_fu_471_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_66_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2425_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln895_319_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_383_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln896_66_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln896_575_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln896_319_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_319_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_319_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln346_319_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_446_fu_537_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_data_V_1537_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_172 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component alveo_hls4ml_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component alveo_hls4ml_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_172)) then
                if ((icmp_ln16_fu_134_p2 = ap_const_lv1_0)) then 
                    i_fu_70 <= i_6_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_V_1529_reg_575 <= out_data_V_1529_fu_347_p3;
                out_data_V_1531_reg_580 <= out_data_V_1531_fu_449_p3;
                out_data_V_1533_reg_585 <= out_data_V_1533_fu_551_p3;
                out_data_V_reg_570 <= out_data_V_fu_245_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer26_out_0_empty_n, layer26_out_1_empty_n, layer26_out_2_empty_n, layer26_out_3_empty_n, layer23_out_0_full_n, layer23_out_1_full_n, layer23_out_2_full_n, layer23_out_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer26_out_3_empty_n = ap_const_logic_0) or (layer26_out_2_empty_n = ap_const_logic_0) or (layer26_out_1_empty_n = ap_const_logic_0) or (layer26_out_0_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((layer23_out_2_full_n = ap_const_logic_0) or (layer23_out_1_full_n = ap_const_logic_0) or (layer23_out_0_full_n = ap_const_logic_0) or (layer23_out_3_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer26_out_0_empty_n, layer26_out_1_empty_n, layer26_out_2_empty_n, layer26_out_3_empty_n, layer23_out_0_full_n, layer23_out_1_full_n, layer23_out_2_full_n, layer23_out_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer26_out_3_empty_n = ap_const_logic_0) or (layer26_out_2_empty_n = ap_const_logic_0) or (layer26_out_1_empty_n = ap_const_logic_0) or (layer26_out_0_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((layer23_out_2_full_n = ap_const_logic_0) or (layer23_out_1_full_n = ap_const_logic_0) or (layer23_out_0_full_n = ap_const_logic_0) or (layer23_out_3_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer26_out_0_empty_n, layer26_out_1_empty_n, layer26_out_2_empty_n, layer26_out_3_empty_n, layer23_out_0_full_n, layer23_out_1_full_n, layer23_out_2_full_n, layer23_out_3_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((layer26_out_3_empty_n = ap_const_logic_0) or (layer26_out_2_empty_n = ap_const_logic_0) or (layer26_out_1_empty_n = ap_const_logic_0) or (layer26_out_0_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((layer23_out_2_full_n = ap_const_logic_0) or (layer23_out_1_full_n = ap_const_logic_0) or (layer23_out_0_full_n = ap_const_logic_0) or (layer23_out_3_full_n = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer26_out_0_empty_n, layer26_out_1_empty_n, layer26_out_2_empty_n, layer26_out_3_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((layer26_out_3_empty_n = ap_const_logic_0) or (layer26_out_2_empty_n = ap_const_logic_0) or (layer26_out_1_empty_n = ap_const_logic_0) or (layer26_out_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer23_out_0_full_n, layer23_out_1_full_n, layer23_out_2_full_n, layer23_out_3_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((layer23_out_2_full_n = ap_const_logic_0) or (layer23_out_1_full_n = ap_const_logic_0) or (layer23_out_0_full_n = ap_const_logic_0) or (layer23_out_3_full_n = ap_const_logic_0));
    end process;


    ap_condition_172_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_172 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln16_fu_134_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln16_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_70, ap_loop_init, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_70;
        end if; 
    end process;

    i_6_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv7_1));
    icmp_ln16_fu_134_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv7_49) else "0";
    icmp_ln878_64_fu_285_p2 <= "0" when (tmp_15_fu_275_p4 = ap_const_lv3_0) else "1";
    icmp_ln878_65_fu_387_p2 <= "0" when (tmp_s_fu_377_p4 = ap_const_lv3_0) else "1";
    icmp_ln878_66_fu_489_p2 <= "0" when (tmp_190_fu_479_p4 = ap_const_lv3_0) else "1";
    icmp_ln878_fu_183_p2 <= "0" when (tmp10_fu_173_p4 = ap_const_lv3_0) else "1";
    icmp_ln896_64_fu_315_p2 <= "0" when (tmp_15_fu_275_p4 = ap_const_lv3_7) else "1";
    icmp_ln896_65_fu_417_p2 <= "0" when (tmp_s_fu_377_p4 = ap_const_lv3_7) else "1";
    icmp_ln896_66_fu_519_p2 <= "0" when (tmp_190_fu_479_p4 = ap_const_lv3_7) else "1";
    icmp_ln896_fu_213_p2 <= "0" when (tmp10_fu_173_p4 = ap_const_lv3_7) else "1";

    layer23_out_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer23_out_0_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer23_out_0_blk_n <= layer23_out_0_full_n;
        else 
            layer23_out_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer23_out_0_din <= out_data_V_reg_570;

    layer23_out_0_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer23_out_0_write <= ap_const_logic_1;
        else 
            layer23_out_0_write <= ap_const_logic_0;
        end if; 
    end process;


    layer23_out_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer23_out_1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer23_out_1_blk_n <= layer23_out_1_full_n;
        else 
            layer23_out_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer23_out_1_din <= out_data_V_1529_reg_575;

    layer23_out_1_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer23_out_1_write <= ap_const_logic_1;
        else 
            layer23_out_1_write <= ap_const_logic_0;
        end if; 
    end process;


    layer23_out_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer23_out_2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer23_out_2_blk_n <= layer23_out_2_full_n;
        else 
            layer23_out_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer23_out_2_din <= out_data_V_1531_reg_580;

    layer23_out_2_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer23_out_2_write <= ap_const_logic_1;
        else 
            layer23_out_2_write <= ap_const_logic_0;
        end if; 
    end process;


    layer23_out_3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer23_out_3_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer23_out_3_blk_n <= layer23_out_3_full_n;
        else 
            layer23_out_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer23_out_3_din <= out_data_V_1533_reg_585;

    layer23_out_3_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer23_out_3_write <= ap_const_logic_1;
        else 
            layer23_out_3_write <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer26_out_0_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer26_out_0_blk_n <= layer26_out_0_empty_n;
        else 
            layer26_out_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer26_out_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer26_out_0_read <= ap_const_logic_1;
        else 
            layer26_out_0_read <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer26_out_1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer26_out_1_blk_n <= layer26_out_1_empty_n;
        else 
            layer26_out_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer26_out_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer26_out_1_read <= ap_const_logic_1;
        else 
            layer26_out_1_read <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer26_out_2_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer26_out_2_blk_n <= layer26_out_2_empty_n;
        else 
            layer26_out_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer26_out_2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer26_out_2_read <= ap_const_logic_1;
        else 
            layer26_out_2_read <= ap_const_logic_0;
        end if; 
    end process;


    layer26_out_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer26_out_3_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            layer26_out_3_blk_n <= layer26_out_3_empty_n;
        else 
            layer26_out_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer26_out_3_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer26_out_3_read <= ap_const_logic_1;
        else 
            layer26_out_3_read <= ap_const_logic_0;
        end if; 
    end process;

    or_ln346_317_fu_341_p2 <= (underflow_317_fu_327_p2 or overflow_317_fu_303_p2);
    or_ln346_318_fu_443_p2 <= (underflow_318_fu_429_p2 or overflow_318_fu_405_p2);
    or_ln346_319_fu_545_p2 <= (underflow_319_fu_531_p2 or overflow_319_fu_507_p2);
    or_ln346_fu_239_p2 <= (underflow_fu_225_p2 or overflow_fu_201_p2);
    or_ln895_317_fu_291_p2 <= (p_Result_2422_fu_267_p3 or icmp_ln878_64_fu_285_p2);
    or_ln895_318_fu_393_p2 <= (p_Result_2424_fu_369_p3 or icmp_ln878_65_fu_387_p2);
    or_ln895_319_fu_495_p2 <= (p_Result_2426_fu_471_p3 or icmp_ln878_66_fu_489_p2);
    or_ln895_fu_189_p2 <= (p_Result_2420_fu_165_p3 or icmp_ln878_fu_183_p2);
    or_ln896_317_fu_321_p2 <= (xor_ln896_573_fu_309_p2 or icmp_ln896_64_fu_315_p2);
    or_ln896_318_fu_423_p2 <= (xor_ln896_574_fu_411_p2 or icmp_ln896_65_fu_417_p2);
    or_ln896_319_fu_525_p2 <= (xor_ln896_575_fu_513_p2 or icmp_ln896_66_fu_519_p2);
    or_ln896_fu_219_p2 <= (xor_ln896_fu_207_p2 or icmp_ln896_fu_213_p2);
    out_data_V_1529_fu_347_p3 <= 
        select_ln346_fu_333_p3 when (or_ln346_317_fu_341_p2(0) = '1') else 
        out_data_V_1535_fu_261_p2;
    out_data_V_1531_fu_449_p3 <= 
        select_ln346_445_fu_435_p3 when (or_ln346_318_fu_443_p2(0) = '1') else 
        out_data_V_1536_fu_363_p2;
    out_data_V_1533_fu_551_p3 <= 
        select_ln346_446_fu_537_p3 when (or_ln346_319_fu_545_p2(0) = '1') else 
        out_data_V_1537_fu_465_p2;
    out_data_V_1534_fu_159_p2 <= std_logic_vector(shift_left(unsigned(layer26_out_0_dout),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    out_data_V_1535_fu_261_p2 <= std_logic_vector(shift_left(unsigned(layer26_out_1_dout),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    out_data_V_1536_fu_363_p2 <= std_logic_vector(shift_left(unsigned(layer26_out_2_dout),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    out_data_V_1537_fu_465_p2 <= std_logic_vector(shift_left(unsigned(layer26_out_3_dout),to_integer(unsigned('0' & ap_const_lv16_3(16-1 downto 0)))));
    out_data_V_fu_245_p3 <= 
        select_ln346_444_fu_231_p3 when (or_ln346_fu_239_p2(0) = '1') else 
        out_data_V_1534_fu_159_p2;
    overflow_317_fu_303_p2 <= (xor_ln895_381_fu_297_p2 and or_ln895_317_fu_291_p2);
    overflow_318_fu_405_p2 <= (xor_ln895_382_fu_399_p2 and or_ln895_318_fu_393_p2);
    overflow_319_fu_507_p2 <= (xor_ln895_383_fu_501_p2 and or_ln895_319_fu_495_p2);
    overflow_fu_201_p2 <= (xor_ln895_fu_195_p2 and or_ln895_fu_189_p2);
    p_Result_2420_fu_165_p3 <= layer26_out_0_dout(12 downto 12);
    p_Result_2421_fu_253_p3 <= layer26_out_1_dout(15 downto 15);
    p_Result_2422_fu_267_p3 <= layer26_out_1_dout(12 downto 12);
    p_Result_2423_fu_355_p3 <= layer26_out_2_dout(15 downto 15);
    p_Result_2424_fu_369_p3 <= layer26_out_2_dout(12 downto 12);
    p_Result_2425_fu_457_p3 <= layer26_out_3_dout(15 downto 15);
    p_Result_2426_fu_471_p3 <= layer26_out_3_dout(12 downto 12);
    p_Result_s_fu_151_p3 <= layer26_out_0_dout(15 downto 15);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln346_444_fu_231_p3 <= 
        ap_const_lv16_7FFF when (overflow_fu_201_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_445_fu_435_p3 <= 
        ap_const_lv16_7FFF when (overflow_318_fu_405_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_446_fu_537_p3 <= 
        ap_const_lv16_7FFF when (overflow_319_fu_507_p2(0) = '1') else 
        ap_const_lv16_8000;
    select_ln346_fu_333_p3 <= 
        ap_const_lv16_7FFF when (overflow_317_fu_303_p2(0) = '1') else 
        ap_const_lv16_8000;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_173_p4 <= layer26_out_0_dout(15 downto 13);
    tmp_15_fu_275_p4 <= layer26_out_1_dout(15 downto 13);
    tmp_190_fu_479_p4 <= layer26_out_3_dout(15 downto 13);
    tmp_s_fu_377_p4 <= layer26_out_2_dout(15 downto 13);
    underflow_317_fu_327_p2 <= (p_Result_2421_fu_253_p3 and or_ln896_317_fu_321_p2);
    underflow_318_fu_429_p2 <= (p_Result_2423_fu_355_p3 and or_ln896_318_fu_423_p2);
    underflow_319_fu_531_p2 <= (p_Result_2425_fu_457_p3 and or_ln896_319_fu_525_p2);
    underflow_fu_225_p2 <= (p_Result_s_fu_151_p3 and or_ln896_fu_219_p2);
    xor_ln895_381_fu_297_p2 <= (p_Result_2421_fu_253_p3 xor ap_const_lv1_1);
    xor_ln895_382_fu_399_p2 <= (p_Result_2423_fu_355_p3 xor ap_const_lv1_1);
    xor_ln895_383_fu_501_p2 <= (p_Result_2425_fu_457_p3 xor ap_const_lv1_1);
    xor_ln895_fu_195_p2 <= (p_Result_s_fu_151_p3 xor ap_const_lv1_1);
    xor_ln896_573_fu_309_p2 <= (p_Result_2422_fu_267_p3 xor ap_const_lv1_1);
    xor_ln896_574_fu_411_p2 <= (p_Result_2424_fu_369_p3 xor ap_const_lv1_1);
    xor_ln896_575_fu_513_p2 <= (p_Result_2426_fu_471_p3 xor ap_const_lv1_1);
    xor_ln896_fu_207_p2 <= (p_Result_2420_fu_165_p3 xor ap_const_lv1_1);
end behav;
