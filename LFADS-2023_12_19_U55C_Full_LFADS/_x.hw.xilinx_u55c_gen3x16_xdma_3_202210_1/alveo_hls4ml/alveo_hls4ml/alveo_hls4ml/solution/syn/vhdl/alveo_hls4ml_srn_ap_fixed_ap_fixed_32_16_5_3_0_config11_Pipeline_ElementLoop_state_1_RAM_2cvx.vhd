-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_1_RAM_2cvx is 
    generic(
        MEM_TYPE        : string    := "block"; 
        DataWidth       : integer   := 32; 
        AddressWidth    : integer   := 6;
        AddressRange    : integer   := 64
    ); 
    port (
        address0    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce0         : in std_logic; 
        q0          : out std_logic_vector(DataWidth-1 downto 0);
        address1    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce1         : in std_logic; 
        d1          : in std_logic_vector(DataWidth-1 downto 0); 
        we1         : in std_logic; 
        reset           : in std_logic; 
        clk             : in std_logic 
    ); 
end entity; 

architecture rtl of alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_1_RAM_2cvx is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);


type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
-- Init 
signal ram : mem_array := (
    0 => "11010111010011110100101011000000", 1 => "01010000000001111001000111010000", 2 => "10111100001011110011111001101000", 3 => "00110100000001011000110111100011", 
    4 => "11000000111001000000011110011000", 5 => "11010010001111001100110001000001", 6 => "10011110011001100110110101010001", 7 => "01001110010000010011010011010000", 
    8 => "00101101111100010100000010011100", 9 => "11110001111011101000001101011010", 10 => "01111001101100001010000100111111", 11 => "01010110111100110010001001011000", 
    12 => "01000101011010010010111111100110", 13 => "11010001100101000001000001011011", 14 => "00011100010000110010010100000001", 15 => "10110011100011100111001100101000", 
    16 => "11000000010100000100111011001110", 17 => "01100100111110011001000010000001", 18 => "10111101010001111001011000001111", 19 => "01100101100111110011000111110010", 
    20 => "11110110010000010101111000001011", 21 => "00111001100001110101011100000010", 22 => "11010111010110100101101110110110", 23 => "10001101110100000011011001100010", 
    24 => "01111001110111000110100100011000", 25 => "10111100001010111111100100101001", 26 => "11001000010100011000010111110000", 27 => "00101100011110111100111110000101", 
    28 => "01111111110101101101110011001101", 29 => "10000000000011101110110110011100", 30 => "10011110001110110111011101001011", 31 => "01101100010000011100100001100011", 
    32 => "11011001000100011011100101100111", 33 => "10001001110100100100111000010111", 34 => "11011101011011100110111110111000", 35 => "10001111100010100000011001110011", 
    36 => "11011000001010100101110110111011", 37 => "11100010100001000111110110001011", 38 => "11000000101001110110100101011100", 39 => "00000001001000110001000011111010", 
    40 => "01010011101111101001100000000101", 41 => "11001010010100100111001100101001", 42 => "00110100000111111110011110010010", 43 => "00001000111100010110001010100100", 
    44 => "01100011000001111011010111111111", 45 => "10111111111110110110100100111010", 46 => "00100000001110111110011011101111", 47 => "11000100111000110000100000111101", 
    48 => "00010111101101100100001100010000", 49 => "00111010100101010000000111110001", 50 => "00001000101000010001100110001110", 51 => "10111101010100111001110100010111", 
    52 => "11111101010101010000101111000010", 53 => "10010000010100110011010101001000", 54 => "11111000010100011101000100000100", 55 => "01011100100010011001111111100110", 
    56 => "10100101110100001110001110001100", 57 => "01111000011000010100101110101000", 58 => "11011000011001110111011101010010", 59 => "11011010110110101011110110000111", 
    60 => "01101011111010111010000101110010", 61 => "10001010101100001000000100100010", 62 => "11010100111010101100001001010111", 63 => "11101011100010110111100000101111"); -- 
attribute syn_ramstyle : string;
attribute syn_ramstyle of ram : signal is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : signal is MEM_TYPE;

begin 


memory_access_guard_0: process (address0) 
begin
    address0_tmp <= address0;
--synthesis translate_off
    if (CONV_INTEGER(address0) > AddressRange-1) then
        address0_tmp <= (others => '0');
    else 
       address0_tmp <= address0;
    end if;
--synthesis translate_on
end process;   -- 



p_memory_access_0: process (clk)
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= ram(CONV_INTEGER(address0_tmp));
        end if;
    end if;
end process;



 


p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            if (we1 = '1') then 
                ram(CONV_INTEGER(address1)) <= d1; 
            end if;
        end if;
    end if;
end process;      




 

end rtl;
