// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module alveo_hls4ml_linear_ap_fixed_16_6_5_3_0_ap_fixed_16_3_4_0_0_linear_config23_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer26_out_0_dout,
        layer26_out_0_num_data_valid,
        layer26_out_0_fifo_cap,
        layer26_out_0_empty_n,
        layer26_out_0_read,
        layer26_out_1_dout,
        layer26_out_1_num_data_valid,
        layer26_out_1_fifo_cap,
        layer26_out_1_empty_n,
        layer26_out_1_read,
        layer26_out_2_dout,
        layer26_out_2_num_data_valid,
        layer26_out_2_fifo_cap,
        layer26_out_2_empty_n,
        layer26_out_2_read,
        layer26_out_3_dout,
        layer26_out_3_num_data_valid,
        layer26_out_3_fifo_cap,
        layer26_out_3_empty_n,
        layer26_out_3_read,
        layer23_out_0_din,
        layer23_out_0_num_data_valid,
        layer23_out_0_fifo_cap,
        layer23_out_0_full_n,
        layer23_out_0_write,
        layer23_out_1_din,
        layer23_out_1_num_data_valid,
        layer23_out_1_fifo_cap,
        layer23_out_1_full_n,
        layer23_out_1_write,
        layer23_out_2_din,
        layer23_out_2_num_data_valid,
        layer23_out_2_fifo_cap,
        layer23_out_2_full_n,
        layer23_out_2_write,
        layer23_out_3_din,
        layer23_out_3_num_data_valid,
        layer23_out_3_fifo_cap,
        layer23_out_3_full_n,
        layer23_out_3_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] layer26_out_0_dout;
input  [7:0] layer26_out_0_num_data_valid;
input  [7:0] layer26_out_0_fifo_cap;
input   layer26_out_0_empty_n;
output   layer26_out_0_read;
input  [15:0] layer26_out_1_dout;
input  [7:0] layer26_out_1_num_data_valid;
input  [7:0] layer26_out_1_fifo_cap;
input   layer26_out_1_empty_n;
output   layer26_out_1_read;
input  [15:0] layer26_out_2_dout;
input  [7:0] layer26_out_2_num_data_valid;
input  [7:0] layer26_out_2_fifo_cap;
input   layer26_out_2_empty_n;
output   layer26_out_2_read;
input  [15:0] layer26_out_3_dout;
input  [7:0] layer26_out_3_num_data_valid;
input  [7:0] layer26_out_3_fifo_cap;
input   layer26_out_3_empty_n;
output   layer26_out_3_read;
output  [15:0] layer23_out_0_din;
input  [7:0] layer23_out_0_num_data_valid;
input  [7:0] layer23_out_0_fifo_cap;
input   layer23_out_0_full_n;
output   layer23_out_0_write;
output  [15:0] layer23_out_1_din;
input  [7:0] layer23_out_1_num_data_valid;
input  [7:0] layer23_out_1_fifo_cap;
input   layer23_out_1_full_n;
output   layer23_out_1_write;
output  [15:0] layer23_out_2_din;
input  [7:0] layer23_out_2_num_data_valid;
input  [7:0] layer23_out_2_fifo_cap;
input   layer23_out_2_full_n;
output   layer23_out_2_write;
output  [15:0] layer23_out_3_din;
input  [7:0] layer23_out_3_num_data_valid;
input  [7:0] layer23_out_3_fifo_cap;
input   layer23_out_3_full_n;
output   layer23_out_3_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer26_out_0_read;
reg layer26_out_1_read;
reg layer26_out_2_read;
reg layer26_out_3_read;
reg layer23_out_0_write;
reg layer23_out_1_write;
reg layer23_out_2_write;
reg layer23_out_3_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln16_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer26_out_0_blk_n;
wire    ap_block_pp0_stage0;
reg    layer26_out_1_blk_n;
reg    layer26_out_2_blk_n;
reg    layer26_out_3_blk_n;
reg    layer23_out_0_blk_n;
reg    layer23_out_1_blk_n;
reg    layer23_out_2_blk_n;
reg    layer23_out_3_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] out_data_V_fu_245_p3;
reg   [15:0] out_data_V_reg_570;
wire   [15:0] out_data_V_1529_fu_347_p3;
reg   [15:0] out_data_V_1529_reg_575;
wire   [15:0] out_data_V_1531_fu_449_p3;
reg   [15:0] out_data_V_1531_reg_580;
wire   [15:0] out_data_V_1533_fu_551_p3;
reg   [15:0] out_data_V_1533_reg_585;
reg   [6:0] i_fu_70;
wire   [6:0] i_6_fu_140_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_5;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] tmp10_fu_173_p4;
wire   [0:0] p_Result_2420_fu_165_p3;
wire   [0:0] icmp_ln878_fu_183_p2;
wire   [0:0] p_Result_s_fu_151_p3;
wire   [0:0] or_ln895_fu_189_p2;
wire   [0:0] xor_ln895_fu_195_p2;
wire   [0:0] icmp_ln896_fu_213_p2;
wire   [0:0] xor_ln896_fu_207_p2;
wire   [0:0] or_ln896_fu_219_p2;
wire   [0:0] overflow_fu_201_p2;
wire   [0:0] underflow_fu_225_p2;
wire   [0:0] or_ln346_fu_239_p2;
wire   [15:0] select_ln346_444_fu_231_p3;
wire   [15:0] out_data_V_1534_fu_159_p2;
wire   [2:0] tmp_15_fu_275_p4;
wire   [0:0] p_Result_2422_fu_267_p3;
wire   [0:0] icmp_ln878_64_fu_285_p2;
wire   [0:0] p_Result_2421_fu_253_p3;
wire   [0:0] or_ln895_317_fu_291_p2;
wire   [0:0] xor_ln895_381_fu_297_p2;
wire   [0:0] icmp_ln896_64_fu_315_p2;
wire   [0:0] xor_ln896_573_fu_309_p2;
wire   [0:0] or_ln896_317_fu_321_p2;
wire   [0:0] overflow_317_fu_303_p2;
wire   [0:0] underflow_317_fu_327_p2;
wire   [0:0] or_ln346_317_fu_341_p2;
wire   [15:0] select_ln346_fu_333_p3;
wire   [15:0] out_data_V_1535_fu_261_p2;
wire   [2:0] tmp_s_fu_377_p4;
wire   [0:0] p_Result_2424_fu_369_p3;
wire   [0:0] icmp_ln878_65_fu_387_p2;
wire   [0:0] p_Result_2423_fu_355_p3;
wire   [0:0] or_ln895_318_fu_393_p2;
wire   [0:0] xor_ln895_382_fu_399_p2;
wire   [0:0] icmp_ln896_65_fu_417_p2;
wire   [0:0] xor_ln896_574_fu_411_p2;
wire   [0:0] or_ln896_318_fu_423_p2;
wire   [0:0] overflow_318_fu_405_p2;
wire   [0:0] underflow_318_fu_429_p2;
wire   [0:0] or_ln346_318_fu_443_p2;
wire   [15:0] select_ln346_445_fu_435_p3;
wire   [15:0] out_data_V_1536_fu_363_p2;
wire   [2:0] tmp_190_fu_479_p4;
wire   [0:0] p_Result_2426_fu_471_p3;
wire   [0:0] icmp_ln878_66_fu_489_p2;
wire   [0:0] p_Result_2425_fu_457_p3;
wire   [0:0] or_ln895_319_fu_495_p2;
wire   [0:0] xor_ln895_383_fu_501_p2;
wire   [0:0] icmp_ln896_66_fu_519_p2;
wire   [0:0] xor_ln896_575_fu_513_p2;
wire   [0:0] or_ln896_319_fu_525_p2;
wire   [0:0] overflow_319_fu_507_p2;
wire   [0:0] underflow_319_fu_531_p2;
wire   [0:0] or_ln346_319_fu_545_p2;
wire   [15:0] select_ln346_446_fu_537_p3;
wire   [15:0] out_data_V_1537_fu_465_p2;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_172;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

alveo_hls4ml_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_172)) begin
        if ((icmp_ln16_fu_134_p2 == 1'd0)) begin
            i_fu_70 <= i_6_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        out_data_V_1529_reg_575 <= out_data_V_1529_fu_347_p3;
        out_data_V_1531_reg_580 <= out_data_V_1531_fu_449_p3;
        out_data_V_1533_reg_585 <= out_data_V_1533_fu_551_p3;
        out_data_V_reg_570 <= out_data_V_fu_245_p3;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln16_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_5 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_70;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        layer23_out_0_blk_n = layer23_out_0_full_n;
    end else begin
        layer23_out_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer23_out_0_write = 1'b1;
    end else begin
        layer23_out_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        layer23_out_1_blk_n = layer23_out_1_full_n;
    end else begin
        layer23_out_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer23_out_1_write = 1'b1;
    end else begin
        layer23_out_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        layer23_out_2_blk_n = layer23_out_2_full_n;
    end else begin
        layer23_out_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer23_out_2_write = 1'b1;
    end else begin
        layer23_out_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        layer23_out_3_blk_n = layer23_out_3_full_n;
    end else begin
        layer23_out_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer23_out_3_write = 1'b1;
    end else begin
        layer23_out_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        layer26_out_0_blk_n = layer26_out_0_empty_n;
    end else begin
        layer26_out_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer26_out_0_read = 1'b1;
    end else begin
        layer26_out_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        layer26_out_1_blk_n = layer26_out_1_empty_n;
    end else begin
        layer26_out_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer26_out_1_read = 1'b1;
    end else begin
        layer26_out_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        layer26_out_2_blk_n = layer26_out_2_empty_n;
    end else begin
        layer26_out_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer26_out_2_read = 1'b1;
    end else begin
        layer26_out_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        layer26_out_3_blk_n = layer26_out_3_empty_n;
    end else begin
        layer26_out_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer26_out_3_read = 1'b1;
    end else begin
        layer26_out_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer26_out_3_empty_n == 1'b0) | (layer26_out_2_empty_n == 1'b0) | (layer26_out_1_empty_n == 1'b0) | (layer26_out_0_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((layer23_out_2_full_n == 1'b0) | (layer23_out_1_full_n == 1'b0) | (layer23_out_0_full_n == 1'b0) | (layer23_out_3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer26_out_3_empty_n == 1'b0) | (layer26_out_2_empty_n == 1'b0) | (layer26_out_1_empty_n == 1'b0) | (layer26_out_0_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((layer23_out_2_full_n == 1'b0) | (layer23_out_1_full_n == 1'b0) | (layer23_out_0_full_n == 1'b0) | (layer23_out_3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((layer26_out_3_empty_n == 1'b0) | (layer26_out_2_empty_n == 1'b0) | (layer26_out_1_empty_n == 1'b0) | (layer26_out_0_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((layer23_out_2_full_n == 1'b0) | (layer23_out_1_full_n == 1'b0) | (layer23_out_0_full_n == 1'b0) | (layer23_out_3_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((layer26_out_3_empty_n == 1'b0) | (layer26_out_2_empty_n == 1'b0) | (layer26_out_1_empty_n == 1'b0) | (layer26_out_0_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((layer23_out_2_full_n == 1'b0) | (layer23_out_1_full_n == 1'b0) | (layer23_out_0_full_n == 1'b0) | (layer23_out_3_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_172 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_6_fu_140_p2 = (ap_sig_allocacmp_i_5 + 7'd1);

assign icmp_ln16_fu_134_p2 = ((ap_sig_allocacmp_i_5 == 7'd73) ? 1'b1 : 1'b0);

assign icmp_ln878_64_fu_285_p2 = ((tmp_15_fu_275_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_65_fu_387_p2 = ((tmp_s_fu_377_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_66_fu_489_p2 = ((tmp_190_fu_479_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_183_p2 = ((tmp10_fu_173_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln896_64_fu_315_p2 = ((tmp_15_fu_275_p4 != 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln896_65_fu_417_p2 = ((tmp_s_fu_377_p4 != 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln896_66_fu_519_p2 = ((tmp_190_fu_479_p4 != 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln896_fu_213_p2 = ((tmp10_fu_173_p4 != 3'd7) ? 1'b1 : 1'b0);

assign layer23_out_0_din = out_data_V_reg_570;

assign layer23_out_1_din = out_data_V_1529_reg_575;

assign layer23_out_2_din = out_data_V_1531_reg_580;

assign layer23_out_3_din = out_data_V_1533_reg_585;

assign or_ln346_317_fu_341_p2 = (underflow_317_fu_327_p2 | overflow_317_fu_303_p2);

assign or_ln346_318_fu_443_p2 = (underflow_318_fu_429_p2 | overflow_318_fu_405_p2);

assign or_ln346_319_fu_545_p2 = (underflow_319_fu_531_p2 | overflow_319_fu_507_p2);

assign or_ln346_fu_239_p2 = (underflow_fu_225_p2 | overflow_fu_201_p2);

assign or_ln895_317_fu_291_p2 = (p_Result_2422_fu_267_p3 | icmp_ln878_64_fu_285_p2);

assign or_ln895_318_fu_393_p2 = (p_Result_2424_fu_369_p3 | icmp_ln878_65_fu_387_p2);

assign or_ln895_319_fu_495_p2 = (p_Result_2426_fu_471_p3 | icmp_ln878_66_fu_489_p2);

assign or_ln895_fu_189_p2 = (p_Result_2420_fu_165_p3 | icmp_ln878_fu_183_p2);

assign or_ln896_317_fu_321_p2 = (xor_ln896_573_fu_309_p2 | icmp_ln896_64_fu_315_p2);

assign or_ln896_318_fu_423_p2 = (xor_ln896_574_fu_411_p2 | icmp_ln896_65_fu_417_p2);

assign or_ln896_319_fu_525_p2 = (xor_ln896_575_fu_513_p2 | icmp_ln896_66_fu_519_p2);

assign or_ln896_fu_219_p2 = (xor_ln896_fu_207_p2 | icmp_ln896_fu_213_p2);

assign out_data_V_1529_fu_347_p3 = ((or_ln346_317_fu_341_p2[0:0] == 1'b1) ? select_ln346_fu_333_p3 : out_data_V_1535_fu_261_p2);

assign out_data_V_1531_fu_449_p3 = ((or_ln346_318_fu_443_p2[0:0] == 1'b1) ? select_ln346_445_fu_435_p3 : out_data_V_1536_fu_363_p2);

assign out_data_V_1533_fu_551_p3 = ((or_ln346_319_fu_545_p2[0:0] == 1'b1) ? select_ln346_446_fu_537_p3 : out_data_V_1537_fu_465_p2);

assign out_data_V_1534_fu_159_p2 = layer26_out_0_dout << 16'd3;

assign out_data_V_1535_fu_261_p2 = layer26_out_1_dout << 16'd3;

assign out_data_V_1536_fu_363_p2 = layer26_out_2_dout << 16'd3;

assign out_data_V_1537_fu_465_p2 = layer26_out_3_dout << 16'd3;

assign out_data_V_fu_245_p3 = ((or_ln346_fu_239_p2[0:0] == 1'b1) ? select_ln346_444_fu_231_p3 : out_data_V_1534_fu_159_p2);

assign overflow_317_fu_303_p2 = (xor_ln895_381_fu_297_p2 & or_ln895_317_fu_291_p2);

assign overflow_318_fu_405_p2 = (xor_ln895_382_fu_399_p2 & or_ln895_318_fu_393_p2);

assign overflow_319_fu_507_p2 = (xor_ln895_383_fu_501_p2 & or_ln895_319_fu_495_p2);

assign overflow_fu_201_p2 = (xor_ln895_fu_195_p2 & or_ln895_fu_189_p2);

assign p_Result_2420_fu_165_p3 = layer26_out_0_dout[32'd12];

assign p_Result_2421_fu_253_p3 = layer26_out_1_dout[32'd15];

assign p_Result_2422_fu_267_p3 = layer26_out_1_dout[32'd12];

assign p_Result_2423_fu_355_p3 = layer26_out_2_dout[32'd15];

assign p_Result_2424_fu_369_p3 = layer26_out_2_dout[32'd12];

assign p_Result_2425_fu_457_p3 = layer26_out_3_dout[32'd15];

assign p_Result_2426_fu_471_p3 = layer26_out_3_dout[32'd12];

assign p_Result_s_fu_151_p3 = layer26_out_0_dout[32'd15];

assign select_ln346_444_fu_231_p3 = ((overflow_fu_201_p2[0:0] == 1'b1) ? 16'd32767 : 16'd32768);

assign select_ln346_445_fu_435_p3 = ((overflow_318_fu_405_p2[0:0] == 1'b1) ? 16'd32767 : 16'd32768);

assign select_ln346_446_fu_537_p3 = ((overflow_319_fu_507_p2[0:0] == 1'b1) ? 16'd32767 : 16'd32768);

assign select_ln346_fu_333_p3 = ((overflow_317_fu_303_p2[0:0] == 1'b1) ? 16'd32767 : 16'd32768);

assign start_out = real_start;

assign tmp10_fu_173_p4 = {{layer26_out_0_dout[15:13]}};

assign tmp_15_fu_275_p4 = {{layer26_out_1_dout[15:13]}};

assign tmp_190_fu_479_p4 = {{layer26_out_3_dout[15:13]}};

assign tmp_s_fu_377_p4 = {{layer26_out_2_dout[15:13]}};

assign underflow_317_fu_327_p2 = (p_Result_2421_fu_253_p3 & or_ln896_317_fu_321_p2);

assign underflow_318_fu_429_p2 = (p_Result_2423_fu_355_p3 & or_ln896_318_fu_423_p2);

assign underflow_319_fu_531_p2 = (p_Result_2425_fu_457_p3 & or_ln896_319_fu_525_p2);

assign underflow_fu_225_p2 = (p_Result_s_fu_151_p3 & or_ln896_fu_219_p2);

assign xor_ln895_381_fu_297_p2 = (p_Result_2421_fu_253_p3 ^ 1'd1);

assign xor_ln895_382_fu_399_p2 = (p_Result_2423_fu_355_p3 ^ 1'd1);

assign xor_ln895_383_fu_501_p2 = (p_Result_2425_fu_457_p3 ^ 1'd1);

assign xor_ln895_fu_195_p2 = (p_Result_s_fu_151_p3 ^ 1'd1);

assign xor_ln896_573_fu_309_p2 = (p_Result_2422_fu_267_p3 ^ 1'd1);

assign xor_ln896_574_fu_411_p2 = (p_Result_2424_fu_369_p3 ^ 1'd1);

assign xor_ln896_575_fu_513_p2 = (p_Result_2426_fu_471_p3 ^ 1'd1);

assign xor_ln896_fu_207_p2 = (p_Result_2420_fu_165_p3 ^ 1'd1);

endmodule //alveo_hls4ml_linear_ap_fixed_16_6_5_3_0_ap_fixed_16_3_4_0_0_linear_config23_s
