-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rnd_array_V_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rnd_array_V_3_ce0 : OUT STD_LOGIC;
    rnd_array_V_3_we0 : OUT STD_LOGIC;
    rnd_array_V_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rnd_array_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rnd_array_V_2_ce0 : OUT STD_LOGIC;
    rnd_array_V_2_we0 : OUT STD_LOGIC;
    rnd_array_V_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rnd_array_V_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rnd_array_V_1_ce0 : OUT STD_LOGIC;
    rnd_array_V_1_we0 : OUT STD_LOGIC;
    rnd_array_V_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rnd_array_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rnd_array_V_ce0 : OUT STD_LOGIC;
    rnd_array_V_we0 : OUT STD_LOGIC;
    rnd_array_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln222_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal state_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_0_ce0 : STD_LOGIC;
    signal state_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_0_ce1 : STD_LOGIC;
    signal state_0_we1 : STD_LOGIC;
    signal state_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_ce0 : STD_LOGIC;
    signal state_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_1_ce1 : STD_LOGIC;
    signal state_1_we1 : STD_LOGIC;
    signal state_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_2_ce0 : STD_LOGIC;
    signal state_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_2_ce1 : STD_LOGIC;
    signal state_2_we1 : STD_LOGIC;
    signal state_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_3_ce0 : STD_LOGIC;
    signal state_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_3_ce1 : STD_LOGIC;
    signal state_3_we1 : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln222_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln222_reg_408 : STD_LOGIC_VECTOR (63 downto 0);
    signal state_0_addr_reg_416 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_0_addr_reg_416_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_addr_reg_422 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_1_addr_reg_422_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_2_addr_reg_428 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_2_addr_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal state_3_addr_reg_434 : STD_LOGIC_VECTOR (5 downto 0);
    signal state_3_addr_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_2_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_2_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_5_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_8_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_8_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_11_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_60 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln222_fu_198_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_229_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1669_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_4_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_3_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_274_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1669_1_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_4_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_7_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_6_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_8_fu_319_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1669_2_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_7_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_9_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_10_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_9_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_364_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1669_3_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_10_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_12_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_0_RAM_2cux IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_1_RAM_2cvx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_2_RAM_2cwx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_3_RAM_2cxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component alveo_hls4ml_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    state_0_U : component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_0_RAM_2cux
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_0_address0,
        ce0 => state_0_ce0,
        q0 => state_0_q0,
        address1 => state_0_addr_reg_416_pp0_iter1_reg,
        ce1 => state_0_ce1,
        we1 => state_0_we1,
        d1 => ret_V_2_reg_440);

    state_1_U : component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_1_RAM_2cvx
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_1_address0,
        ce0 => state_1_ce0,
        q0 => state_1_q0,
        address1 => state_1_addr_reg_422_pp0_iter1_reg,
        ce1 => state_1_ce1,
        we1 => state_1_we1,
        d1 => ret_V_5_reg_445);

    state_2_U : component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_2_RAM_2cwx
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_2_address0,
        ce0 => state_2_ce0,
        q0 => state_2_q0,
        address1 => state_2_addr_reg_428_pp0_iter1_reg,
        ce1 => state_2_ce1,
        we1 => state_2_we1,
        d1 => ret_V_8_reg_450);

    state_3_U : component alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_3_RAM_2cxx
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_3_address0,
        ce0 => state_3_ce0,
        q0 => state_3_q0,
        address1 => state_3_addr_reg_434_pp0_iter1_reg,
        ce1 => state_3_ce1,
        we1 => state_3_we1,
        d1 => ret_V_11_reg_455);

    flow_control_loop_pipe_sequential_init_U : component alveo_hls4ml_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln222_fu_192_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_60 <= add_ln222_fu_198_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ret_V_11_reg_455 <= ret_V_11_fu_390_p2;
                ret_V_2_reg_440 <= ret_V_2_fu_255_p2;
                ret_V_5_reg_445 <= ret_V_5_fu_300_p2;
                ret_V_8_reg_450 <= ret_V_8_fu_345_p2;
                state_0_addr_reg_416_pp0_iter1_reg <= state_0_addr_reg_416;
                state_1_addr_reg_422_pp0_iter1_reg <= state_1_addr_reg_422;
                state_2_addr_reg_428_pp0_iter1_reg <= state_2_addr_reg_428;
                state_3_addr_reg_434_pp0_iter1_reg <= state_3_addr_reg_434;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_192_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                state_0_addr_reg_416 <= zext_ln222_fu_204_p1(6 - 1 downto 0);
                state_1_addr_reg_422 <= zext_ln222_fu_204_p1(6 - 1 downto 0);
                state_2_addr_reg_428 <= zext_ln222_fu_204_p1(6 - 1 downto 0);
                state_3_addr_reg_434 <= zext_ln222_fu_204_p1(6 - 1 downto 0);
                    zext_ln222_reg_408(6 downto 0) <= zext_ln222_fu_204_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln222_reg_408(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln222_fu_198_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln222_fu_192_p2)
    begin
        if (((icmp_ln222_fu_192_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_60;
        end if; 
    end process;

    icmp_ln222_fu_192_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv7_40) else "0";
    r_V_10_fu_352_p2 <= std_logic_vector(shift_left(unsigned(state_3_q0),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    r_V_11_fu_364_p4 <= ret_V_9_fu_358_p2(31 downto 17);
    r_V_12_fu_384_p2 <= std_logic_vector(shift_left(unsigned(ret_V_10_fu_378_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    r_V_2_fu_229_p4 <= ret_V_fu_223_p2(31 downto 17);
    r_V_3_fu_249_p2 <= std_logic_vector(shift_left(unsigned(ret_V_1_fu_243_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    r_V_4_fu_262_p2 <= std_logic_vector(shift_left(unsigned(state_1_q0),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    r_V_5_fu_274_p4 <= ret_V_3_fu_268_p2(31 downto 17);
    r_V_6_fu_294_p2 <= std_logic_vector(shift_left(unsigned(ret_V_4_fu_288_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    r_V_7_fu_307_p2 <= std_logic_vector(shift_left(unsigned(state_2_q0),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    r_V_8_fu_319_p4 <= ret_V_6_fu_313_p2(31 downto 17);
    r_V_9_fu_339_p2 <= std_logic_vector(shift_left(unsigned(ret_V_7_fu_333_p2),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    r_V_fu_217_p2 <= std_logic_vector(shift_left(unsigned(state_0_q0),to_integer(unsigned('0' & ap_const_lv32_D(31-1 downto 0)))));
    ret_V_10_fu_378_p2 <= (zext_ln1669_3_fu_374_p1 xor ret_V_9_fu_358_p2);
    ret_V_11_fu_390_p2 <= (ret_V_10_fu_378_p2 xor r_V_12_fu_384_p2);
    ret_V_1_fu_243_p2 <= (zext_ln1669_fu_239_p1 xor ret_V_fu_223_p2);
    ret_V_2_fu_255_p2 <= (ret_V_1_fu_243_p2 xor r_V_3_fu_249_p2);
    ret_V_3_fu_268_p2 <= (state_1_q0 xor r_V_4_fu_262_p2);
    ret_V_4_fu_288_p2 <= (zext_ln1669_1_fu_284_p1 xor ret_V_3_fu_268_p2);
    ret_V_5_fu_300_p2 <= (ret_V_4_fu_288_p2 xor r_V_6_fu_294_p2);
    ret_V_6_fu_313_p2 <= (state_2_q0 xor r_V_7_fu_307_p2);
    ret_V_7_fu_333_p2 <= (zext_ln1669_2_fu_329_p1 xor ret_V_6_fu_313_p2);
    ret_V_8_fu_345_p2 <= (ret_V_7_fu_333_p2 xor r_V_9_fu_339_p2);
    ret_V_9_fu_358_p2 <= (state_3_q0 xor r_V_10_fu_352_p2);
    ret_V_fu_223_p2 <= (state_0_q0 xor r_V_fu_217_p2);
    rnd_array_V_1_address0 <= zext_ln222_reg_408(6 - 1 downto 0);

    rnd_array_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_1_ce0 <= ap_const_logic_1;
        else 
            rnd_array_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_1_d0 <= (ret_V_4_fu_288_p2 xor r_V_6_fu_294_p2);

    rnd_array_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_1_we0 <= ap_const_logic_1;
        else 
            rnd_array_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_2_address0 <= zext_ln222_reg_408(6 - 1 downto 0);

    rnd_array_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_2_ce0 <= ap_const_logic_1;
        else 
            rnd_array_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_2_d0 <= (ret_V_7_fu_333_p2 xor r_V_9_fu_339_p2);

    rnd_array_V_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_2_we0 <= ap_const_logic_1;
        else 
            rnd_array_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_3_address0 <= zext_ln222_reg_408(6 - 1 downto 0);

    rnd_array_V_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_3_ce0 <= ap_const_logic_1;
        else 
            rnd_array_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_3_d0 <= (ret_V_10_fu_378_p2 xor r_V_12_fu_384_p2);

    rnd_array_V_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_3_we0 <= ap_const_logic_1;
        else 
            rnd_array_V_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_address0 <= zext_ln222_reg_408(6 - 1 downto 0);

    rnd_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_ce0 <= ap_const_logic_1;
        else 
            rnd_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rnd_array_V_d0 <= (ret_V_1_fu_243_p2 xor r_V_3_fu_249_p2);

    rnd_array_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rnd_array_V_we0 <= ap_const_logic_1;
        else 
            rnd_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    state_0_address0 <= zext_ln222_fu_204_p1(6 - 1 downto 0);

    state_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_0_ce0 <= ap_const_logic_1;
        else 
            state_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_0_ce1 <= ap_const_logic_1;
        else 
            state_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_0_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_0_we1 <= ap_const_logic_1;
        else 
            state_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_1_address0 <= zext_ln222_fu_204_p1(6 - 1 downto 0);

    state_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_1_ce0 <= ap_const_logic_1;
        else 
            state_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_1_ce1 <= ap_const_logic_1;
        else 
            state_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_1_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_1_we1 <= ap_const_logic_1;
        else 
            state_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_2_address0 <= zext_ln222_fu_204_p1(6 - 1 downto 0);

    state_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_2_ce0 <= ap_const_logic_1;
        else 
            state_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_2_ce1 <= ap_const_logic_1;
        else 
            state_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_2_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_2_we1 <= ap_const_logic_1;
        else 
            state_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_3_address0 <= zext_ln222_fu_204_p1(6 - 1 downto 0);

    state_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            state_3_ce0 <= ap_const_logic_1;
        else 
            state_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_3_ce1 <= ap_const_logic_1;
        else 
            state_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_3_we1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            state_3_we1 <= ap_const_logic_1;
        else 
            state_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1669_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_5_fu_274_p4),32));
    zext_ln1669_2_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_fu_319_p4),32));
    zext_ln1669_3_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_11_fu_364_p4),32));
    zext_ln1669_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_229_p4),32));
    zext_ln222_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
end behav;
