-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_2_RAM_2cwx is 
    generic(
        MEM_TYPE        : string    := "block"; 
        DataWidth       : integer   := 32; 
        AddressWidth    : integer   := 6;
        AddressRange    : integer   := 64
    ); 
    port (
        address0    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce0         : in std_logic; 
        q0          : out std_logic_vector(DataWidth-1 downto 0);
        address1    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce1         : in std_logic; 
        d1          : in std_logic_vector(DataWidth-1 downto 0); 
        we1         : in std_logic; 
        reset           : in std_logic; 
        clk             : in std_logic 
    ); 
end entity; 

architecture rtl of alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_2_RAM_2cwx is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);


type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
-- Init 
signal ram : mem_array := (
    0 => "11000001110010010100000011101100", 1 => "00111011110101000110101100011010", 2 => "01011101011100010111101101100100", 3 => "00010001011010101000011001010111", 
    4 => "11010101110000110100011010101111", 5 => "10011111111100011010111010001100", 6 => "10101000100110010010011101011011", 7 => "10011001000100000100010101001010", 
    8 => "01001111010111100001110101100000", 9 => "01000100000110011110001000110001", 10 => "11000011000110011011000110001001", 11 => "11111111110110010101100101100000", 
    12 => "01110111011111001011101010000100", 13 => "10111101011001001000111000011101", 14 => "01011010001111111011101111100001", 15 => "00100111101010110101001100110000", 
    16 => "00011010010010011001111011101000", 17 => "01000001111011101011101010111100", 18 => "10010110011010111101010110000100", 19 => "11011110011010111101111110010000", 
    20 => "00000110111100011100000000000100", 21 => "11111011000001010010101011011101", 22 => "10101010010100111100111001101000", 23 => "10001001101110111111101110010101", 
    24 => "00100110110111001100110010111001", 25 => "11100000100001101100001110010000", 26 => "00000100010001001001110010001011", 27 => "00010100011101101111110111010000", 
    28 => "11011101110001011010110001001100", 29 => "01111101100011011001010100000100", 30 => "00001011001000011110100011011000", 31 => "01000001010010111000100011100011", 
    32 => "00011010011111000010010111010100", 33 => "11001000111001011000111001101101", 34 => "11001110100111101101101001101011", 35 => "00010100100010010110011110010011", 
    36 => "01001110101011010110110010110101", 37 => "10111101101001101011110001011101", 38 => "11100010000000010001010111100000", 39 => "10000101011001100110101100111001", 
    40 => "11001010010001101110101110001010", 41 => "11011101011010110101101101011000", 42 => "00100111000010011100111000001110", 43 => "00111001010110000101111101011000", 
    44 => "00100010101000011101010011111011", 45 => "01110111010000101111011111110000", 46 => "00100100100010111101111101100101", 47 => "00010001101000010001000100101101", 
    48 => "10001110111000101010011011001011", 49 => "10100000011010010001011111011101", 50 => "00111010110000001100101010111111", 51 => "00101101010010000110101111000000", 
    52 => "10101111100011001111011011011011", 53 => "10101010011101111101010111111100", 54 => "01001011011000000111001101101100", 55 => "10010001001000010111101101000110", 
    56 => "00010000111010011100010101111000", 57 => "00101001100110001011100000100111", 58 => "11111101001010001001011011101110", 59 => "00001001001010100100110100011011", 
    60 => "10011101001111101111010101101001", 61 => "00101000010100100000110111101011", 62 => "10101101011110100111001100100000", 63 => "11110000010101001010110100010000"); -- 
attribute syn_ramstyle : string;
attribute syn_ramstyle of ram : signal is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : signal is MEM_TYPE;

begin 


memory_access_guard_0: process (address0) 
begin
    address0_tmp <= address0;
--synthesis translate_off
    if (CONV_INTEGER(address0) > AddressRange-1) then
        address0_tmp <= (others => '0');
    else 
       address0_tmp <= address0;
    end if;
--synthesis translate_on
end process;   -- 



p_memory_access_0: process (clk)
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= ram(CONV_INTEGER(address0_tmp));
        end if;
    end if;
end process;



 


p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            if (we1 = '1') then 
                ram(CONV_INTEGER(address1)) <= d1; 
            end if;
        end if;
    end if;
end process;      




 

end rtl;
