-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_0_RAM_2cux is 
    generic(
        MEM_TYPE        : string    := "block"; 
        DataWidth       : integer   := 32; 
        AddressWidth    : integer   := 6;
        AddressRange    : integer   := 64
    ); 
    port (
        address0    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce0         : in std_logic; 
        q0          : out std_logic_vector(DataWidth-1 downto 0);
        address1    : in std_logic_vector(AddressWidth-1 downto 0); 
        ce1         : in std_logic; 
        d1          : in std_logic_vector(DataWidth-1 downto 0); 
        we1         : in std_logic; 
        reset           : in std_logic; 
        clk             : in std_logic 
    ); 
end entity; 

architecture rtl of alveo_hls4ml_srn_ap_fixed_ap_fixed_32_16_5_3_0_config11_Pipeline_ElementLoop_state_0_RAM_2cux is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);


type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
-- Init 
signal ram : mem_array := (
    0 => "00111000000001011110101000101100", 1 => "00011100011111101111101100001010", 2 => "11011010111110000010000111111001", 3 => "10010011011101100111100110001101", 
    4 => "01100110101011110111101100010001", 5 => "11100010001000011011011010011111", 6 => "01101011100000110011110101101110", 7 => "00011111010101001010000101110101", 
    8 => "01101100010101001110100000100010", 9 => "01111001110001100010100110110011", 10 => "11111101011101110101110110000010", 11 => "00010100011100000011001010010110", 
    12 => "00010111100000111001110001000010", 13 => "11100100110001001100001010110100", 14 => "00111101111110111111100110111111", 15 => "00000111100010110111011100000111", 
    16 => "01101011111000010010101010110100", 17 => "11000110000110101001000000100100", 18 => "00100011101011011000101000001000", 19 => "01110111001001110110001110011010", 
    20 => "10000011001100100010111011011110", 21 => "10011001011100001111111110101101", 22 => "00011010010010001010101001011101", 23 => "00011100001000110101011010100011", 
    24 => "11000010110111110010010111100000", 25 => "11010111111101111000000111001010", 26 => "00010111000111010011110011100111", 27 => "10001111110111110000111100110011", 
    28 => "11000100110001001011000110001001", 29 => "00100010100010111001110110110101", 30 => "00001101001011011111110101001101", 31 => "01011010100000000011011001000110", 
    32 => "11000001010011010110001001011110", 33 => "00111000000010001100101111011100", 34 => "01011101110011100111110010010000", 35 => "11111010111100110000100111101110", 
    36 => "10110111100001011111111101001110", 37 => "01111001000111001011100000101101", 38 => "00010110110100101101110000001010", 39 => "11011111100101000100100010010001", 
    40 => "00100001010110011001011110101111", 41 => "11110010010110110011110110000110", 42 => "00100101101100000111100000110110", 43 => "10110111010111100100011101111110", 
    44 => "01001001000010110101110011011110", 45 => "00001101100000101000111111001101", 46 => "01011000111010011111100000011010", 47 => "10011000011101001100111101000100", 
    48 => "00110100110111010010001110001011", 49 => "10100010000110100110110111010101", 50 => "01101000101111101010001010101001", 51 => "01111100001100010101100100011101", 
    52 => "10011000110111011001010000100010", 53 => "11001011101011011110110001111001", 54 => "10100011110101110111110111101110", 55 => "11110000101110110001001110001001", 
    56 => "11010110001011011111010100000001", 57 => "01011100110111100010100011111100", 58 => "11011001111111011101010010011011", 59 => "11000011010001010100001110001011", 
    60 => "10001011111111011001100111111111", 61 => "10101110101110101000010011111010", 62 => "00101100000010101110001101100000", 63 => "11000011010110000101100101011110"); -- 
attribute syn_ramstyle : string;
attribute syn_ramstyle of ram : signal is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : signal is MEM_TYPE;

begin 


memory_access_guard_0: process (address0) 
begin
    address0_tmp <= address0;
--synthesis translate_off
    if (CONV_INTEGER(address0) > AddressRange-1) then
        address0_tmp <= (others => '0');
    else 
       address0_tmp <= address0;
    end if;
--synthesis translate_on
end process;   -- 



p_memory_access_0: process (clk)
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= ram(CONV_INTEGER(address0_tmp));
        end if;
    end if;
end process;



 


p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            if (we1 = '1') then 
                ram(CONV_INTEGER(address1)) <= d1; 
            end if;
        end if;
    end if;
end process;      




 

end rtl;
